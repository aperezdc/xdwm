# vim:ft=sh

# If ConsoleKit is installed, relaunch ourselves under its control. This
# means that some additional permissions will be granted because the user
# will be connected to a “seat” (e.g. ability to suspend the machine or
# to mount removable USB devices).
#
# XXX Note that we always reload ourselves when Bash is not being used
#     to ensure that a featureful, well-known shell is in use. After
#     the relaunch, Bash-specific features can (and should!) be used.
#
if [ -z "${__XDWM_SESSION_RELAUNCH}" ]
then
	export __XDWM_SESSION_RELAUNCH=1
  if [ -x /usr/bin/ck-launch-session ] ; then
		exec /usr/bin/ck-launch-session /bin/bash "$0" "$@"
	elif [ -z "${BASH}" ] ; then
		exec /bin/bash "$0" "$@"
	fi
fi
unset __XDWM_SESSION_RELAUNCH

# Choose a reasonable web browser. The list of options is in order of
# preference. If a browser is already defined, or none of them is found,
# the BROWSER environment variable is left untouched.
#
if [[ -z ${BROWSER} ]] || ! type -P "${BROWSER}" ; then
	for browser in chromium-browser chromium epiphany firefox ; do
		if type -P "${browser}" ; then
			export BROWSER=${browser}
			break
		fi
	done
fi &> /dev/null

# Load ~/.Xresources & ~/.Xdefaults, if possible.
#
if type -P xrdb
then
	[[ -r ~/.Xdefaults  ]] && xrdb -merge ~/.Xdefaults
	[[ -r ~/.Xresources ]] && xrdb -merge ~/.Xresources
fi &> /dev/null

# Ensure needed directories are created. Save the current working directory
# to be used later to launch the window manager under it.
#
if [[ -n ${XDG_CACHE_HOME} ]] ; then
	XDWM_DIR="${XDG_CACHE_HOME}/xdwm"
else
	XDWM_DIR="${HOME}/.cache/xdwm"
fi
export XDWM_DIR

cwd=$(pwd)
mkdir -p "${XDWM_DIR}/log"
cd "${XDWM_DIR}"

# Start logger process. Later on all processes are launched so they log
# their messages to the FIFO, being then picked up by this.
#
if [[ ! -p log.fifo ]]
then
	rm -f  log.fifo
	mkfifo log.fifo
fi
dmon -p log.pid -e cat log.fifo -- drlog -t log/

# We always want D-Bus, and it is terribly painful to launch it using DMon.
# A little delay is added, so it has time to properly start
#
# TODO Launch dbus-daemon using dmon. How to get the environment vars?
#
# XXX Making an arbitrary delay is error-prone.
#
if type -P dbus-launch ; then
	eval "$(dbus-launch --exit-with-session --sh-syntax)"
	sleep 0.5
fi &> /dev/null

# Same for gnome-keyring-daemon. It would have been much better to make it
# run under DMon.
#
# TODO Launch gnome-keyring-daemon using dmon. Again... environment vars?
#
if type -P gnome-keyring-daemon ; then
	eval "$(gnome-keyring-daemon --start --daemonize)"
	export GNOME_KEYRING_CONTROL SSH_AUTH_SOCK GPG_AGENT_INFO GNOME_KEYRING_PID
fi &> /dev/null

# Usage: [S=name] [X=executable-path] service path/to/daemon [daemon-arguments...]
#
# Launches a service using dmon, redirecting stderr to stdout, storing a PID
# file under ~/.xinit/run/<name>.pid, and connecting the output to the log
# pipe at ~/.xinit/run/log.fifo
#
# If the service name is not specified, the base name of the daemon is used.
#
service ()
{
	local exename=${X:-$1}
	local svcname=${S:-$(basename "${exename}")}
	echo -n "Starting ${svcname} ("
	if type -P "${exename}" &> /dev/null
	then
		dmon -e -p "${svcname}.pid" "$@" -- dlog log.fifo
		echo "$(< "${svcname}.pid"))"
		echo "  dmon -e -p ${svcname}.pid $* -- dlog log.fifo"
	else
		echo "not available?)"
		rm -f "${svcname}.pid" # Just in case, stay safe.
	fi
}

# Cleans up all running processes that were launched with the service()
# function above. SIGTERM is sent to the controlling dmon processes,
# which in turn will forward it to the daemon and wait for it to die.
#
cleanup () {
	cd "${XDWM_DIR}"
	local pid pidfile svcname
	for pidfile in *.pid ; do
		pid=$(< "${pidfile}")
		svcname=${pidfile%.pid}
		echo "Killing ${svcname} (${pid})"
		kill -0 "${pid}" && kill "${pid}"
		rm -f "${pidfile}"
	done
}

# For whatever reason the script finishes, call cleanup() to kill daemons.
#
trap cleanup INT QUIT TERM EXIT

# We want to run Pulseaudio as soon as possible right away, so it registers
# itself in the X11 root window, and the GNOME settings daemon picks it up.
#
# TODO Launch Pulseaudio using dmon. That (hopefully) will be easier.
#
if type -P pulseaudio ; then
	pulseaudio --check && pulseaudio --kill
	if type -P start-pulseaudio-x11 ; then
		start-pulseaudio-x11
	else
		pulseaudio --start
		if [[ -n ${DISPLAY} ]] && type -P pactl ; then
			pactl load-module module-x11-publish "display=${DISPLAY}"
			if [[ -n ${SESSION_MANAGER} ]] ; then
				pactl load-module module-x11-xsmp \
					"display=${DISPLAY} session_manager=${SESSION_MANAGER}"
			fi
		fi
	fi
fi &> /dev/null

# Launch a number of services...
#
# TODO Right now, those are tailored to the author's needs. Some generic
#      services may be kept (g-s-d, bluetooth, NM), but others need to go
#      away and be user-customizable.
#
# XXX  Maybe XDG-autostart should be taken into account here. Problem is:
#      the commands in autostarted .desktop files are not dmon-friendly
#      most of the time (they detach, maybe libnofork.so could be used).
#
service /usr/lib/gnome-settings-daemon/gnome-settings-daemon
service gnome-screensaver --no-daemon
service bluetooth-applet
service nm-applet
service mpd --no-daemon --stderr
service scmpc --foreground
service trayer --heighttype pixel --height 18 --widthtype request \
       --edge top --align right --margin 57 --SetDockType true
S=dwm-status X=sh service --interval 30 sh -c 'xsetroot -name "$(date +%H:%M)"'

# Last, but not least, restore the previously-saved working directory and
# use DMon also to launch the window manager. The “-1” flag (run once) is
# passsed so it is not restarted on a proper, user-requested finalization.
# Flag “-n” is used so the process is not detached to background, making
# it so the session will be closed once this instance of DMon exits.
#
cd "${cwd}"
dmon -s -e -n -1 xdwm -- dlog ~/.xinit/run/log.fifo

